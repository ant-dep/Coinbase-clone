'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var hooks = require('@3rdweb/hooks');
var React = require('react');
var react = require('@chakra-ui/react');
var icons = require('@chakra-ui/icons');
var fi = require('react-icons/fi');
var io5 = require('react-icons/io5');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var ThirdwebThemeProvider = function ThirdwebThemeProvider(_ref) {
  var theme = _ref.theme,
      children = _ref.children;
  return /*#__PURE__*/React__default["default"].createElement(react.ChakraProvider, {
    theme: theme
  }, children);
};

var _excluded$3 = ["theme", "children"];
var ThirdwebProvider = function ThirdwebProvider(_ref) {
  var theme = _ref.theme,
      children = _ref.children,
      restProps = _objectWithoutPropertiesLoose(_ref, _excluded$3);

  return /*#__PURE__*/React__default["default"].createElement(hooks.ThirdwebWeb3Provider, restProps, /*#__PURE__*/React__default["default"].createElement(ThirdwebThemeProvider, {
    theme: theme
  }, children));
};

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var NetworkIcon = function NetworkIcon(_ref) {
  var chainId = _ref.chainId,
      _ref$height = _ref.height,
      height = _ref$height === void 0 ? "36px" : _ref$height,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? "36px" : _ref$width,
      _ref$borderRadius = _ref.borderRadius,
      borderRadius = _ref$borderRadius === void 0 ? 0 : _ref$borderRadius;

  var _useWeb = hooks.useWeb3(),
      getNetworkMetadata = _useWeb.getNetworkMetadata;

  var icon = getNetworkMetadata(chainId).icon;

  if (typeof icon === "string") {
    return /*#__PURE__*/React__default["default"].createElement(react.Image, {
      src: icon,
      height: height,
      width: width,
      borderRadius: borderRadius
    });
  }

  return /*#__PURE__*/React__default["default"].createElement(react.Icon, {
    as: icon,
    height: height,
    width: width,
    borderRadius: borderRadius
  });
};

function shortenAddress(str) {
  return str.substring(0, 6) + "..." + str.substring(str.length - 4);
}

var _excluded$2 = ["onOpen", "isOpen"];
var ConnectButton = function ConnectButton(_ref) {
  var onOpen = _ref.onOpen,
      isOpen = _ref.isOpen,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$2);

  var _useWeb = hooks.useWeb3(),
      address = _useWeb.address,
      balance = _useWeb.balance,
      chainId = _useWeb.chainId,
      error = _useWeb.error,
      getNetworkMetadata = _useWeb.getNetworkMetadata;

  var _useSwitchNetwork = hooks.useSwitchNetwork(),
      switchError = _useSwitchNetwork.switchError;

  var networkMetadata = React.useMemo(function () {
    if (chainId) {
      return getNetworkMetadata(chainId);
    }
  }, [chainId, getNetworkMetadata]);
  return /*#__PURE__*/React__default["default"].createElement(react.Tooltip, {
    zIndex: -1,
    hasArrow: true,
    isOpen: !isOpen && (!!error || !!switchError),
    label: switchError ? switchError.message : error ? error.message : address ? "Manage your connected wallet" : "Connect your wallet to get started"
  }, address ? /*#__PURE__*/React__default["default"].createElement(react.Flex, _extends({
    borderRadius: "25px",
    borderWidth: "1px",
    borderColor: "gray.300",
    padding: "6px",
    height: "48px",
    align: "center",
    onClick: onOpen,
    cursor: "pointer",
    _hover: {
      borderColor: "#5CC4FF"
    }
  }, props), /*#__PURE__*/React__default["default"].createElement(react.Stack, {
    flexShrink: 0,
    direction: "row",
    align: "center",
    pr: 3
  }, /*#__PURE__*/React__default["default"].createElement(NetworkIcon, {
    chainId: chainId
  }), /*#__PURE__*/React__default["default"].createElement(react.Stack, {
    textAlign: "left",
    justify: "flex-start",
    spacing: 0
  }, /*#__PURE__*/React__default["default"].createElement(react.Text, {
    size: "label.md",
    color: "heading",
    lineHeight: 1
  }, shortenAddress(address)), /*#__PURE__*/React__default["default"].createElement(react.Text, {
    color: "gray.500",
    fontSize: "12px",
    lineHeight: 1
  }, networkMetadata == null ? void 0 : networkMetadata.chainName))), /*#__PURE__*/React__default["default"].createElement(react.Divider, {
    borderColor: "gray.300",
    flexShrink: 0,
    orientation: "vertical"
  }), /*#__PURE__*/React__default["default"].createElement(react.Text, {
    flexShrink: 0,
    px: 3,
    fontSize: "12px",
    color: "#0098EE",
    lineHeight: "14px"
  }, balance == null ? void 0 : balance.formatted, networkMetadata && networkMetadata.symbol.length > 2 && /*#__PURE__*/React__default["default"].createElement("br", null), networkMetadata == null ? void 0 : networkMetadata.symbol)) : /*#__PURE__*/React__default["default"].createElement(react.Button, _extends({
    px: 6,
    borderRadius: "8px",
    leftIcon: error || switchError ? /*#__PURE__*/React__default["default"].createElement(icons.Icon, {
      as: fi.FiAlertTriangle
    }) : /*#__PURE__*/React__default["default"].createElement(icons.Icon, {
      as: io5.IoWalletOutline
    }),
    onClick: onOpen,
    iconSpacing: 3,
    colorScheme: error || switchError ? "red" : "blue"
  }, props), error || switchError ? "Network Error" : "Connect Wallet"));
};

var _excluded$1 = ["address", "noIcon"];
var AddressCopyButton = function AddressCopyButton(_ref) {
  var address = _ref.address,
      noIcon = _ref.noIcon,
      restButtonProps = _objectWithoutPropertiesLoose(_ref, _excluded$1);

  var _useClipboard = react.useClipboard(address || ""),
      onCopy = _useClipboard.onCopy;

  var toast = react.useToast();
  var defaultProps = {
    flexGrow: 0,
    variant: "solid",
    size: "sm",
    fontSize: "md",
    fontWeight: "normal"
  };
  return /*#__PURE__*/React__default["default"].createElement(react.Tooltip, {
    hasArrow: true,
    label: "Copy address to clipboard"
  }, /*#__PURE__*/React__default["default"].createElement(react.ButtonGroup, _extends({}, _extends({}, defaultProps, restButtonProps), {
    isAttached: true,
    onClick: function onClick(e) {
      e.stopPropagation();
      e.preventDefault();
      onCopy();
      toast({
        title: "Address copied.",
        status: "success",
        duration: 5000,
        isClosable: true
      });
    }
  }), noIcon ? null : /*#__PURE__*/React__default["default"].createElement(react.IconButton, {
    mr: "-px",
    borderRight: "none",
    "aria-label": "Add to friends",
    icon: /*#__PURE__*/React__default["default"].createElement(react.Icon, {
      as: io5.IoCopy
    })
  }), /*#__PURE__*/React__default["default"].createElement(react.Button, null, address && shortenAddress(address))));
};

var ModalConnected = function ModalConnected(_ref) {
  var disableNetworkSwitching = _ref.disableNetworkSwitching;

  var _useThirdwebContext = hooks.useThirdwebContext(),
      supportedChainIds = _useThirdwebContext.supportedChainIds;

  var _useSwitchNetwork = hooks.useSwitchNetwork(),
      switchError = _useSwitchNetwork.switchError;

  var _useWeb = hooks.useWeb3(),
      chainId = _useWeb.chainId,
      connector = _useWeb.connector,
      error = _useWeb.error,
      address = _useWeb.address,
      activeProvider = _useWeb.activeProvider,
      disconnectWallet = _useWeb.disconnectWallet,
      getNetworkMetadata = _useWeb.getNetworkMetadata;

  return /*#__PURE__*/React__default["default"].createElement(react.Flex, {
    direction: "column"
  }, !disableNetworkSwitching && !(connector != null && connector.magic) && !(connector != null && connector.walletConnectProvider) && /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(react.Flex, {
    direction: "column"
  }, /*#__PURE__*/React__default["default"].createElement(react.Heading, {
    as: "h4",
    size: "sm",
    fontWeight: "600",
    mb: "12px"
  }, "Switch network"), supportedChainIds.filter(function (cId) {
    return !getNetworkMetadata(cId).isTestnet;
  }).map(function (cId, index) {
    return /*#__PURE__*/React__default["default"].createElement(Network, {
      key: index,
      index: index,
      cId: cId
    });
  }), supportedChainIds.filter(function (cId) {
    return getNetworkMetadata(cId).isTestnet;
  }).map(function (cId, index) {
    return /*#__PURE__*/React__default["default"].createElement(Network, {
      key: index,
      index: index,
      cId: cId
    });
  })), /*#__PURE__*/React__default["default"].createElement(react.Divider, {
    mt: "32px",
    mb: "24px",
    width: "md",
    alignSelf: "center"
  })), disableNetworkSwitching && /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(react.Flex, {
    direction: "column"
  }, /*#__PURE__*/React__default["default"].createElement(react.Heading, {
    as: "h4",
    size: "sm",
    fontWeight: "600",
    mb: "12px"
  }, "Connected network"), /*#__PURE__*/React__default["default"].createElement(Network, {
    index: 0,
    cId: chainId || 0
  })), /*#__PURE__*/React__default["default"].createElement(react.Divider, {
    mt: "32px",
    mb: "24px",
    width: "md",
    alignSelf: "center"
  })), /*#__PURE__*/React__default["default"].createElement(react.Stack, {
    spacing: 4
  }, /*#__PURE__*/React__default["default"].createElement(react.Heading, {
    as: "h4",
    size: "sm",
    fontWeight: "600"
  }, "Connected wallet"), error || switchError ? /*#__PURE__*/React__default["default"].createElement(react.Alert, {
    status: "error",
    borderRadius: "md",
    fontSize: "sm",
    fontWeight: "medium"
  }, /*#__PURE__*/React__default["default"].createElement(react.AlertIcon, null), (switchError == null ? void 0 : switchError.message) || (error == null ? void 0 : error.message)) : /*#__PURE__*/React__default["default"].createElement(react.Flex, {
    align: "center"
  }, /*#__PURE__*/React__default["default"].createElement(react.Flex, {
    direction: "column",
    align: "start"
  }, /*#__PURE__*/React__default["default"].createElement(AddressCopyButton, {
    variant: "outline",
    address: address
  })), /*#__PURE__*/React__default["default"].createElement(react.Button, {
    onClick: disconnectWallet,
    variant: "outline",
    ml: "auto",
    size: "sm"
  }, activeProvider != null && activeProvider.isMetaMask ? "Switch" : "Disconnect"))));
};

var Network = function Network(_ref2) {
  var index = _ref2.index,
      cId = _ref2.cId;

  var _useWeb2 = hooks.useWeb3(),
      chainId = _useWeb2.chainId,
      getNetworkMetadata = _useWeb2.getNetworkMetadata;

  var _useSwitchNetwork2 = hooks.useSwitchNetwork(),
      switchNetwork = _useSwitchNetwork2.switchNetwork;

  return /*#__PURE__*/React__default["default"].createElement(react.Flex, {
    key: index,
    alignSelf: "center",
    onClick: function onClick() {
      return switchNetwork(cId);
    },
    align: "center",
    width: "md",
    px: "20px",
    py: "2px",
    cursor: "pointer"
  }, /*#__PURE__*/React__default["default"].createElement(react.Flex, {
    width: "100%",
    align: "center",
    borderRadius: "25px",
    padding: "6px",
    justify: "space-between",
    bg: cId === chainId ? "gray.100" : undefined,
    _hover: {
      bg: "gray.200"
    }
  }, /*#__PURE__*/React__default["default"].createElement(react.Flex, {
    align: "center"
  }, /*#__PURE__*/React__default["default"].createElement(NetworkIcon, {
    chainId: cId
  }), /*#__PURE__*/React__default["default"].createElement(react.Text, {
    ml: "12px",
    fontWeight: "medium",
    fontSize: "14px"
  }, getNetworkMetadata(cId).chainName), getNetworkMetadata(cId).isTestnet && /*#__PURE__*/React__default["default"].createElement(react.Text, {
    fontSize: "14px",
    color: "gray.400"
  }, "\xA0(testnet)")), cId === chainId && /*#__PURE__*/React__default["default"].createElement(react.Text, {
    color: "blue.400",
    fontSize: "14px",
    mr: "8px"
  }, "Connected")));
};

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

var ModalDisconnected = function ModalDisconnected() {
  var _useState = React.useState(""),
      email = _useState[0],
      setEmail = _useState[1];

  var _useState2 = React.useState(false),
      loading = _useState2[0],
      setLoading = _useState2[1];

  var _useState3 = React.useState(false),
      error = _useState3[0],
      setError = _useState3[1];

  var _useWeb = hooks.useWeb3(),
      address = _useWeb.address,
      connectWallet = _useWeb.connectWallet,
      connectors = _useWeb.connectors;

  function isEmailValid() {
    var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(email);
  }

  function connectMagic() {
    return _connectMagic.apply(this, arguments);
  }

  function _connectMagic() {
    _connectMagic = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!isEmailValid()) {
                _context.next = 8;
                break;
              }

              setEmail("");
              setLoading(true);
              _context.next = 5;
              return connectWallet("magic", {
                email: email
              });

            case 5:
              setLoading(false);
              _context.next = 9;
              break;

            case 8:
              setError(true);

            case 9:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _connectMagic.apply(this, arguments);
  }

  return /*#__PURE__*/React__default["default"].createElement(react.Flex, {
    direction: "column"
  }, connectors.includes("magic") && /*#__PURE__*/React__default["default"].createElement(react.Stack, {
    spacing: 4
  }, /*#__PURE__*/React__default["default"].createElement(react.Heading, {
    as: "h4",
    size: "sm",
    fontWeight: "600"
  }, "Connect with email"), /*#__PURE__*/React__default["default"].createElement(react.Flex, {
    direction: "column"
  }, /*#__PURE__*/React__default["default"].createElement(react.Flex, null, /*#__PURE__*/React__default["default"].createElement(react.Input, {
    value: email,
    onChange: function onChange(e) {
      setEmail(e.target.value);
      setError(false);
    },
    placeholder: "name@example.com",
    borderRadius: "4px 0px 0px 4px"
  }), /*#__PURE__*/React__default["default"].createElement(react.Button, {
    borderRadius: "0px 4px 4px 0px",
    width: "120px",
    onClick: connectMagic
  }, loading ? /*#__PURE__*/React__default["default"].createElement(react.Flex, null, /*#__PURE__*/React__default["default"].createElement(react.Spinner, null)) : "Connect")), error && /*#__PURE__*/React__default["default"].createElement(react.Text, {
    color: "red.400",
    fontSize: "14px",
    mt: "4px"
  }, "Please enter a valid email."))), connectors.includes("magic") && connectors.some(function (connector) {
    return connector !== "magic";
  }) && /*#__PURE__*/React__default["default"].createElement(react.Divider, {
    mt: "32px",
    mb: "24px",
    width: "md",
    alignSelf: "center"
  }), connectors.some(function (connector) {
    return connector !== "magic";
  }) && /*#__PURE__*/React__default["default"].createElement(react.Stack, {
    spacing: 4
  }, /*#__PURE__*/React__default["default"].createElement(react.Heading, {
    as: "h4",
    size: "sm",
    mt: "0px",
    fontWeight: "600"
  }, "Connect a", address ? " different" : "", " wallet"), connectors.includes("injected") && "object" !== "undefined" && "ethereum" in window && /*#__PURE__*/React__default["default"].createElement(react.Button, {
    size: "lg",
    variant: "outline",
    isFullWidth: true,
    iconSpacing: "auto",
    rightIcon: /*#__PURE__*/React__default["default"].createElement(react.AspectRatio, {
      ratio: 1,
      w: 6
    }, /*#__PURE__*/React__default["default"].createElement(react.Image, {
      src: "https://thirdweb.com/logos/metamask-fox.svg"
    })),
    onClick: function onClick() {
      return connectWallet("injected");
    }
  }, "MetaMask"), connectors.includes("walletconnect") && /*#__PURE__*/React__default["default"].createElement(react.Button, {
    size: "lg",
    variant: "outline",
    isFullWidth: true,
    iconSpacing: "auto",
    rightIcon: /*#__PURE__*/React__default["default"].createElement(react.AspectRatio, {
      ratio: 1,
      w: 6
    }, /*#__PURE__*/React__default["default"].createElement(react.Image, {
      src: "https://thirdweb.com/logos/walletconnect-logo.svg"
    })),
    onClick: function onClick() {
      return connectWallet("walletconnect");
    }
  }, "WalletConnect"), connectors.includes("walletlink") && /*#__PURE__*/React__default["default"].createElement(react.Button, {
    size: "lg",
    variant: "outline",
    isFullWidth: true,
    iconSpacing: "auto",
    rightIcon: /*#__PURE__*/React__default["default"].createElement(react.AspectRatio, {
      ratio: 1,
      w: 6
    }, /*#__PURE__*/React__default["default"].createElement(react.Image, {
      src: "https://thirdweb.com/logos/coinbase-wallet-logo.svg"
    })),
    onClick: function onClick() {
      return connectWallet("walletlink");
    }
  }, "Coinbase Wallet")));
};

var _excluded = ["disableNetworkSwitching"];
var ConnectWallet = function ConnectWallet(_ref) {
  var disableNetworkSwitching = _ref.disableNetworkSwitching,
      props = _objectWithoutPropertiesLoose(_ref, _excluded);

  var _useDisclosure = react.useDisclosure(),
      isOpen = _useDisclosure.isOpen,
      onOpen = _useDisclosure.onOpen,
      onClose = _useDisclosure.onClose;

  var _useWeb = hooks.useWeb3(),
      chainId = _useWeb.chainId,
      address = _useWeb.address,
      connector = _useWeb.connector,
      error = _useWeb.error;

  var previousConnector = react.usePrevious(connector);
  var previousChainId = react.usePrevious(chainId);
  var previousAddress = react.usePrevious(address); // if chain id changes, then close modal

  React.useEffect(function () {
    if (previousChainId !== chainId) {
      onClose();
    }
  }, [chainId, previousChainId, onClose]); // if chain id changes, then close modal

  React.useEffect(function () {
    if (previousAddress !== address) {
      onClose();
    }
  }, [onClose, previousAddress, address]); // if connector changes, then close modal

  React.useEffect(function () {
    if (connector && !previousConnector || !connector && previousConnector) {
      onClose();
    }
  }, [connector, onClose, previousConnector]);
  return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(ConnectButton, _extends({
    isOpen: isOpen,
    onOpen: onOpen
  }, props)), /*#__PURE__*/React__default["default"].createElement(react.Modal, {
    isOpen: isOpen,
    onClose: onClose,
    isCentered: true,
    size: "md"
  }, /*#__PURE__*/React__default["default"].createElement(react.ModalOverlay, null), /*#__PURE__*/React__default["default"].createElement(react.ModalContent, {
    pb: 4,
    bg: "gray.50"
  }, /*#__PURE__*/React__default["default"].createElement(react.ModalCloseButton, null), /*#__PURE__*/React__default["default"].createElement(react.ModalBody, {
    pt: "24px"
  }, /*#__PURE__*/React__default["default"].createElement(react.Flex, {
    direction: "column"
  }, connector && !error ? /*#__PURE__*/React__default["default"].createElement(ModalConnected, {
    disableNetworkSwitching: disableNetworkSwitching
  }) : /*#__PURE__*/React__default["default"].createElement(ModalDisconnected, null))))));
};

exports.ConnectWallet = ConnectWallet;
exports.ThirdwebProvider = ThirdwebProvider;
