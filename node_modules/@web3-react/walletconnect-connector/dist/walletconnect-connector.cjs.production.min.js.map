{"version":3,"file":"walletconnect-connector.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { IWCEthRpcConnectionOptions } from '@walletconnect/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport { ConnectorUpdate } from '@web3-react/types'\n\nexport const URI_AVAILABLE = 'URI_AVAILABLE'\n\nexport interface WalletConnectConnectorArguments extends IWCEthRpcConnectionOptions {\n  supportedChainIds?: number[]\n}\n\nexport class UserRejectedRequestError extends Error {\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    this.message = 'The user rejected the request.'\n  }\n}\n\nfunction getSupportedChains({ supportedChainIds, rpc }: WalletConnectConnectorArguments): number[] | undefined {\n  if (supportedChainIds) {\n    return supportedChainIds\n  }\n\n  return rpc ? Object.keys(rpc).map(k => Number(k)) : undefined\n}\n\nexport class WalletConnectConnector extends AbstractConnector {\n  public walletConnectProvider?: any\n  private readonly config: WalletConnectConnectorArguments\n\n  constructor(config: WalletConnectConnectorArguments) {\n    super({ supportedChainIds: getSupportedChains(config) })\n    this.config = config\n\n    this.handleChainChanged = this.handleChainChanged.bind(this)\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n    this.handleDisconnect = this.handleDisconnect.bind(this)\n  }\n\n  private handleChainChanged(chainId: number | string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts[0] })\n  }\n\n  private handleDisconnect(): void {\n    if (__DEV__) {\n      console.log(\"Handling 'disconnect' event\")\n    }\n    // we have to do this because of a @walletconnect/web3-provider bug\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.stop()\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\n      this.walletConnectProvider = undefined\n    }\n    this.emitDeactivate()\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.walletConnectProvider) {\n      const WalletConnectProvider = await import('@walletconnect/ethereum-provider').then(m => m?.default ?? m)\n      this.walletConnectProvider = new WalletConnectProvider(this.config)\n    }\n\n    // ensure that the uri is going to be available, and emit an event if there's a new uri\n    if (!this.walletConnectProvider.wc.connected) {\n      await this.walletConnectProvider.wc.createSession(\n        this.config.chainId ? { chainId: this.config.chainId } : undefined\n      )\n      this.emit(URI_AVAILABLE, this.walletConnectProvider.wc.uri)\n    }\n\n    let account: string\n    account = await new Promise<string>((resolve, reject) => {\n      const userReject = () => {\n        // Erase the provider manually\n        this.walletConnectProvider = undefined\n        reject(new UserRejectedRequestError())\n      }\n\n      // Workaround to bubble up the error when user reject the connection\n      this.walletConnectProvider.wc.on('disconnect', () => {\n        // Check provider has not been enabled to prevent this event callback from being called in the future\n        if (!account) {\n          userReject()\n        }\n      })\n\n      this.walletConnectProvider\n        .enable()\n        .then((accounts: string[]) => resolve(accounts[0]))\n        .catch((error: Error): void => {\n          // TODO ideally this would be a better check\n          if (error.message === 'User closed modal') {\n            userReject()\n            return\n          }\n          reject(error)\n        })\n    }).catch(err => {\n      throw err\n    })\n\n    this.walletConnectProvider.on('disconnect', this.handleDisconnect)\n    this.walletConnectProvider.on('chainChanged', this.handleChainChanged)\n    this.walletConnectProvider.on('accountsChanged', this.handleAccountsChanged)\n\n    return { provider: this.walletConnectProvider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.walletConnectProvider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return Promise.resolve(this.walletConnectProvider.chainId)\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return Promise.resolve(this.walletConnectProvider.accounts).then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.removeListener('disconnect', this.handleDisconnect)\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\n      this.walletConnectProvider.disconnect()\n    }\n  }\n\n  public async close() {\n    this.emitDeactivate()\n  }\n}\n"],"names":["UserRejectedRequestError","name","_this","constructor","message","Error","WalletConnectConnector","config","supportedChainIds","rpc","Object","keys","map","k","Number","undefined","handleChainChanged","_this2","bind","handleAccountsChanged","handleDisconnect","chainId","emitUpdate","accounts","account","this","walletConnectProvider","stop","removeListener","emitDeactivate","activate","Promise","resolve","reject","userReject","wc","on","enable","then","error","err","_this4","provider","connected","createSession","emit","uri","m","WalletConnectProvider","getProvider","getChainId","getAccount","deactivate","disconnect","close","AbstractConnector"],"mappings":"44CAUaA,8DAGJC,KAAOC,EAAKC,YAAYF,OACxBG,QAAU,sDAJ2BC,QAgBjCC,yBAICC,WAZgBC,EAAmBC,uBAavC,CAAED,qBAAsCD,EAbpBC,IAAAA,kBAAmBC,IAAAA,IAC3CD,IAIGC,EAAMC,OAAOC,KAAKF,GAAKG,KAAI,SAAAC,UAAKC,OAAOD,WAAME,aAS7CR,OAASA,IAETS,mBAAqBC,EAAKD,mBAAmBE,aAC7CC,sBAAwBF,EAAKE,sBAAsBD,aACnDE,iBAAmBH,EAAKG,iBAAiBF,+CAGxCF,mBAAA,SAAmBK,QAIpBC,WAAW,CAAED,QAAAA,OAGZF,sBAAA,SAAsBI,QAIvBD,WAAW,CAAEE,QAASD,EAAS,QAG9BH,iBAAA,WAKFK,KAAKC,6BACFA,sBAAsBC,YACtBD,sBAAsBE,eAAe,eAAgBH,KAAKT,yBAC1DU,sBAAsBE,eAAe,kBAAmBH,KAAKN,4BAC7DO,2BAAwBX,QAE1Bc,oBAGMC,8BACNL,mCAaDD,yBACY,IAAIO,SAAgB,SAACC,EAASC,OACtCC,EAAa,aAEZR,2BAAwBX,EAC7BkB,EAAO,IAAIjC,MAIR0B,sBAAsBS,GAAGC,GAAG,cAAc,WAExCZ,GACHU,SAICR,sBACFW,SACAC,MAAK,SAACf,UAAuBS,EAAQT,EAAS,cACxC,SAACgB,GAEgB,sBAAlBA,EAAMnC,QAIV6B,EAAOM,GAHLL,iBAKC,SAAAM,SACDA,+BA3BRhB,MA8BKE,sBAAsBU,GAAG,aAAcK,EAAKrB,oBAC5CM,sBAAsBU,GAAG,eAAgBK,EAAKzB,sBAC9CU,sBAAsBU,GAAG,kBAAmBK,EAAKtB,uBAE/C,CAAEuB,SAAUD,EAAKf,sBAAuBF,QAAAA,2BA1C1CiB,EAAKf,sBAAsBS,GAAGQ,iCAC3BF,EAAKf,sBAAsBS,GAAGS,cAClCH,EAAKlC,OAAOc,QAAU,CAAEA,QAASoB,EAAKlC,OAAOc,cAAYN,uBAEtD8B,KA1EkB,gBA0EEJ,EAAKf,sBAAsBS,GAAGW,4DAVpDL,EAAKf,6CAC4B,8QAAO,yCAAoCY,MAAK,SAAAS,+BAAKA,SAAAA,aAAcA,qBAAjGC,KACDtB,sBAAwB,IAAIsB,EAAsBP,EAAKlC,oGAiDnD0C,kDACJxB,KAAKC,6DAGDwB,iCACJnB,QAAQC,QAAQP,KAAKC,sBAAsBL,+CAGvC8B,iCACJpB,QAAQC,QAAQP,KAAKC,sBAAsBH,UAAUe,MAAK,SAACf,UAA+BA,EAAS,4CAGrG6B,WAAA,WACD3B,KAAKC,6BACFA,sBAAsBE,eAAe,aAAcH,KAAKL,uBACxDM,sBAAsBE,eAAe,eAAgBH,KAAKT,yBAC1DU,sBAAsBE,eAAe,kBAAmBH,KAAKN,4BAC7DO,sBAAsB2B,iBAIlBC,4BACX7B,KAAKI,0EAnHmC0B,2CAtBf"}